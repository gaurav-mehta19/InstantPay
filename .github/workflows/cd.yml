name: Build and Deploy to Docker Hub

on:
  push:
    branches:
      - main # Adjusted to trigger on pushes to main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Check Out Repo
      uses: actions/checkout@v4

    - name: Prepare Dockerfile
      run: cp ./docker/Dockerfile.user_app ./Dockerfile

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          unni19/instant_pay_container:latest
          unni19/instant_pay_container:${{ github.sha }}

    - name: Verify Pushed Image
      run: docker pull unni19/instant_pay_container:latest

# the above CD does these things
# 1. clone the repo
# 2. Dockerize it 
# 3. Push the docker image to Docker Hub




  # - name: Deploy to EC2
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.SSH_HOST }}
  #       username: ${{ secrets.SSH_USERNAME }}
  #       key: ${{ secrets.SSH_KEY }}
  #       script: |
  #         sudo docker pull 100xdevs/web-app:latest
  #         sudo docker stop web-app || true
  #         sudo docker rm web-app || true
  #         sudo docker run -d --name web-app -p 3005:3000 100xdevs/web-app:latest


# Point userapp.your_domain.com to the IP of the server
# Add nginx reverse proxy to forward requests from userapp.your_domain.com to port on which the app is running

# server {
#         server_name userapp.100xdevs.com;

#         location / {
#             proxy_pass http://localhost:3005;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection 'upgrade';
#             proxy_set_header Host $host;
#             proxy_cache_bypass $http_upgrade;


#                 # Basic Authentication
#                 auth_basic "Restricted Content";
#                 auth_basic_user_file /etc/nginx/.htpasswd;
#         }

#     listen 443 ssl; # managed by Certbot
#     ssl_certificate /etc/letsencrypt/live/userapp.100xdevs.com/fullchain.pem; # managed by Certbot
#     ssl_certificate_key /etc/letsencrypt/live/userapp.100xdevs.com/privkey.pem; # managed by Certbot
#     include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

# }

# Install certbot and Refresh certificate
# sudo certbot --nginx


